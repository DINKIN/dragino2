--- /dev/null
+++ b/drivers/dahdi/dfxs.c
@@ -0,0 +1,620 @@
+/*
+ * DAHDI driver for the FXS module on the Dragino platform
+ *
+ * Written by Dimitar Penev, dpn at switchvoice dot com
+ *
+ * All rights reserved.
+ *
+ * See http://www.asterisk.org for more information about
+ * the Asterisk project. Please do not directly contact
+ * any of the maintainers of this project for assistance;
+ * the project provides a web site, mailing lists and IRC
+ * channels for your use.
+ *
+ * This program is free software, distributed under the terms of
+ * the GNU General Public License Version 2 as published by the
+ * Free Software Foundation. See the LICENSE file included with
+ * this program for more details.
+ */
+
+#include <linux/delay.h>
+#include <linux/kernel.h>
+#include <linux/errno.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/pci.h>
+#include <linux/interrupt.h>
+#include <linux/proc_fs.h>
+#include "proslic.h"
+#include "dfxs.h"
+#include <linux/sched.h>
+
+#include <dahdi/kernel.h>
+
+#define WC_MAX_IFACES 128
+
+#define WC_CNTL    	0x00
+#define WC_OPER		0x01
+#define WC_AUXC    	0x02
+#define WC_AUXD    	0x03
+#define WC_MASK0   	0x04
+#define WC_MASK1   	0x05
+#define WC_INTSTAT 	0x06
+#define WC_AUXR		0x07
+
+#define WC_DMAWS	0x08
+#define WC_DMAWI	0x0c
+#define WC_DMAWE	0x10
+#define WC_DMARS	0x18
+#define WC_DMARI	0x1c
+#define WC_DMARE	0x20
+
+#define WC_AUXFUNC	0x2b
+#define WC_SERCTL	0x2d
+#define WC_FSCDELAY	0x2f
+
+#define WC_REGBASE	0xc0
+
+#define WC_SYNC		0x0
+#define WC_TEST		0x1
+#define WC_CS		0x2
+#define WC_VER		0x3
+
+struct dfxs {
+	int   irq;
+	char *variety;
+	struct dahdi_span span;
+	unsigned char ios;
+	int usecount;
+	int dead;
+	int pos;
+	int freeregion;
+	int alt;
+	int curcard;
+	int cardflag;		/* Bit-map of present cards
+				   In Dragino we support a single FXS card */
+	unsigned int intcount;
+	spinlock_t lock;
+
+	union {
+		struct {
+			int oldrxhook;
+			int lastrxhook;
+			int ohttimer;
+			int idletxhookstate;		/* IDLE changing hook state */
+			int lasttxhook;
+			s32 hook_ilong;			/* Hook detection based on ILONG, averaging */
+			s32 hook_iloop;
+			s32 hook_ilong_speed;		/* Averagaded speed of the ILONG */
+		} fxs;
+	} mod;
+
+	/* Receive hook state and debouncing */
+
+	volatile u8 *writechunk;				/* Double-word aligned write memory */
+	volatile u8 *readchunk;					/* Double-word aligned read memory */
+	struct dahdi_chan chan;
+	struct dahdi_chan *_chan;
+};
+
+char *descr = "Dragino FXS driver";
+
+static struct dfxs *ifaces[WC_MAX_IFACES];
+
+static void dfxs_release(struct dfxs *wc);
+
+static int debug = 0;
+static struct dfxs *devs;
+
+/* added for uCasterisk/Blackfin */
+
+static int dfxs_init_ok = 0;
+
+//Due to some reason the MADC_ILOOP doesn't reflect the loop curent by stright way.
+//So the built in loop cloasure detection doesn't work. 
+//MADC_ILONG seems to reflect the hook state better then MADC_ILOOP in the not ringing state. 
+//So lets implement hook_state manually combining MADC_ILONG and MADC_LOOP from the dfxs driver
+int ringing=0;	
+int rung=0;
+int si3217x_hook_status(void){
+
+	int i;
+	u32 val,ilong_old; 
+	s32 ilong_speed;
+	static int ilong_onhook, ilong_offhook;
+	static int iloop_offhook;
+	static int old_ringing;
+	struct dfxs *wc = devs;
+	
+	if(ringing && !rung) rung=1;
+
+	if(!rung){
+		iloop_offhook=0;
+		//Detection based on ILONG ================
+		si3217x_read_ram(SI3217X_MADC_ILONG, &val);
+		if(val> ILONG_ONHOOK_TRESHOLD)
+			ilong_onhook++;
+ 		else
+			ilong_onhook=0;
+        
+		if(val < ILONG_OFFHOOK_TRESHOLD)
+                	ilong_offhook++;
+        	else
+			ilong_offhook=0;
+
+		if(wc->mod.fxs.lastrxhook == PROSLIC_OFFHOOK && ilong_onhook > HOOK_COUNT_TRESHOLD) return PROSLIC_ONHOOK;
+		if(wc->mod.fxs.lastrxhook == PROSLIC_ONHOOK && ilong_offhook > HOOK_COUNT_TRESHOLD) return PROSLIC_OFFHOOK;
+
+	} else {
+		//Detection based on ILOOP =================
+		si3217x_read_ram(SI3217X_MADC_ILOOP, &val);
+		if(val > ILOOP_OFFHOOK_LOW_TRESHOLD && val < ILOOP_OFFHOOK_HIGH_TRESHOLD) iloop_offhook++; 
+		else
+			iloop_offhook=0;
+		
+		if(old_ringing && !ringing) iloop_offhook=0;
+		old_ringing = ringing;
+
+		if(wc->mod.fxs.lastrxhook == PROSLIC_ONHOOK && iloop_offhook > HOOK_COUNT_TRESHOLD) {
+			ringing=0;
+			rung=0;
+			return PROSLIC_OFFHOOK;
+		}
+	}
+	
+	return wc->mod.fxs.oldrxhook;
+
+}
+
+static void work_interrupt_processing(struct work_struct *test);
+static DECLARE_WORK(work_interrupt, work_interrupt_processing);
+
+/* handles regular interrupt processing, called every time we get a DMA
+   interrupt which is every 1ms with DAHDI_CHUNKSIZE == 8 */
+void regular_interrupt_processing(u8 *readchunk, u8 *writechunk) {
+  	struct dfxs *wc = devs;
+	int i;
+//	static u8 j=0;		
+
+	wc->intcount++;        
+
+	/* Calculate Transmission */
+	dahdi_transmit(&wc->span);
+
+	for(i=0; i<DAHDI_CHUNKSIZE; i++){
+		writechunk[i] = wc->chan.writechunk[i];
+		wc->chan.readchunk[i] = readchunk[i];
+	}
+
+        /* XXX We're wasting 8 taps.  We should get closer :( */
+//      if (wc->cardflag)
+//              dahdi_ec_chunk(&wc->chan, wc->chan.readchunk, wc->chan.writechunk);
+
+        dahdi_receive(&wc->span);
+
+        schedule_work(&work_interrupt);
+}
+
+/* The work interrupt is a soft IRQ that can properly communicate with
+ * the SPI kernel drivers and sleep without crashing the kernel */
+static void work_interrupt_processing(struct work_struct *test) {
+	
+	struct dfxs *wc = devs;
+
+        /* as ISR is started before chips initialised we need this test
+           to ensure we don't test the hook switch and ring detect
+           before chips initialised */
+
+	/* check hook switch 30 times per second*/
+	if (dfxs_init_ok && wc->cardflag && !(wc->intcount % 10)){ 
+
+	//	toggle();
+		wc->mod.fxs.lastrxhook = si3217x_hook_status();
+
+		if(wc->mod.fxs.oldrxhook != wc->mod.fxs.lastrxhook){
+			if(wc->mod.fxs.lastrxhook == PROSLIC_OFFHOOK){
+	
+				if(debug>1){ 
+					printk("dfxs: Going off hook\n");
+				}
+
+				dahdi_hooksig(&wc->chan, DAHDI_RXSIG_OFFHOOK);		
+			} else {
+	
+				if(debug>1){
+					printk("dfxs: Going on hook\n");
+				}
+
+				dahdi_hooksig(&wc->chan, DAHDI_RXSIG_ONHOOK);
+			}
+
+			wc->mod.fxs.oldrxhook = wc->mod.fxs.lastrxhook;
+		}                            
+	}
+}
+
+static int dfxs_ioctl(struct dahdi_chan *chan, unsigned int cmd, unsigned long data) {
+	
+	struct dfxs_stats stats;
+	struct dfxs_mem mem;
+	struct dfxs_regop regop;
+	struct dfxs_ramop ramop;
+	struct dfxs *wc = chan->pvt;
+	int i;
+	u32 temp;	
+
+	switch (cmd) {
+	case DAHDI_ONHOOKTRANSFER:
+	        if (debug) printk("dfxs_ioctl, DAHDI_ONHOOKTRANSFER\n");
+		if (get_user(i, (int *)data))
+			return -EFAULT;
+		wc->mod.fxs.ohttimer = i << 3;
+
+		/* Note: this ioctl is meant for setting the onhook time for
+		   transfers, not sure why we need to modify state of
+		   SLIC here?
+		*/
+		wc->mod.fxs.idletxhookstate = 0x2;
+		
+		if (wc->mod.fxs.lasttxhook == 0x1) {
+			// Apply the change if appropriate 
+			wc->mod.fxs.lasttxhook = 0x2;
+			si3217x_write_reg(SI3217X_LINEFEED, wc->mod.fxs.lasttxhook);
+		}
+		break;
+	case DFXS_GET_STATS:
+		si3217x_read_ram(SI3217X_MADC_VTIPC, &temp);
+		stats.tipvolt = (int)((temp*SI3217X_VOLTRES)>>20);
+		si3217x_read_ram(SI3217X_MADC_VRINGC, &temp);
+		stats.ringvolt = (int)((temp*SI3217X_VOLTRES)>>20);
+		si3217x_read_ram(SI3217X_MADC_VBAT, &temp);
+                stats.batvolt = (int)((temp*SI3217X_VOLTRES)>>20);
+		if (copy_to_user((struct dfxs_stats *)data, &stats, sizeof(stats)))
+			return -EFAULT;
+		break;
+	case DFXS_GET_REGS:
+		if (debug) printk("dfxs_ioctl, DFXS_GET_REG\n");
+		for (i=0; i<NUM_REGS; i++)
+			si3217x_read_reg(i, &(mem.reg[i]));
+		for (i=0; i<NUM_RAMS; i++)
+			si3217x_read_ram(i, &(mem.ram[i]));
+		if (copy_to_user((struct mem *)data, &mem, sizeof(mem)))
+			return -EFAULT;
+		break;
+        case DFXS_GET_REG:
+                if (debug) printk("dfxs_ioctl, DFXS_GET_REG\n");
+                if (copy_from_user(&regop, (struct dfxs_regop *)data, sizeof(regop)))
+                        return -EFAULT;
+                si3217x_read_reg(regop.address, &regop.val);
+		if (copy_to_user((struct dfxs_regop *)data, &regop, sizeof(regop)))
+                        return -EFAULT;
+                break;
+	case DFXS_SET_REG:
+	        if (debug) printk("dfxs_ioctl, DFXS_SET_REG\n");
+		if (copy_from_user(&regop, (struct dfxs_regop *)data, sizeof(regop)))
+			return -EFAULT;
+		if (debug) printk("Setting %d to %04x\n", regop.address, regop.val);
+		si3217x_write_reg(regop.address, regop.val);
+		break;
+        case DFXS_GET_RAM:
+                if (debug) printk("dfxs_ioctl, DFXS_GET_RAM\n");
+                if (copy_from_user(&ramop, (struct dfxs_ramop *)data, sizeof(ramop)))
+                        return -EFAULT;
+                si3217x_read_ram(ramop.address, &ramop.val);
+		if (copy_to_user((struct dfxs_ramop *)data, &ramop, sizeof(ramop)))
+                        return -EFAULT;
+                break;
+        case DFXS_SET_RAM:
+		if (debug) printk("dfxs_ioctl, DFXS_SET_RAM\n");
+                if (copy_from_user(&ramop, (struct dfxs_ramop *)data, sizeof(ramop)))
+                        return -EFAULT;
+                if (debug) printk("Setting %d to %04x\n", ramop.address, ramop.val);
+                si3217x_write_ram(ramop.address, ramop.val);
+		break;
+	default:
+		return -ENOTTY;
+	}
+	return 0;
+
+}
+
+static int dfxs_open(struct dahdi_chan *chan)
+{
+	struct dfxs *wc = chan->pvt;
+	if (!(wc->cardflag & (1 << (chan->chanpos - 1))))
+		return -ENODEV;
+	if (wc->dead)
+		return -ENODEV;
+	wc->usecount++;
+	return 0;
+}
+
+static int dfxs_watchdog(struct dahdi_span *span, int event)
+{
+	printk("TDM: Restarting DMA\n");
+	return 0;
+}
+
+static int dfxs_close(struct dahdi_chan *chan)
+{
+	struct dfxs *wc = chan->pvt;
+	wc->usecount--;
+	
+	wc->mod.fxs.idletxhookstate = 1;
+
+	/* If we're dead, release us now */
+	if (!wc->usecount && wc->dead) 
+		dfxs_release(wc);
+	return 0;
+}
+
+static void work_dfxs_hooksig_si3217x(struct work_struct *test);
+static DECLARE_WORK(work_dfxs_hooksig,  work_dfxs_hooksig_si3217x);
+
+static int dfxs_hooksig(struct dahdi_chan *chan, enum dahdi_txsig  txsig)
+{
+	struct dfxs *wc = chan->pvt;
+	switch(txsig) {
+	case DAHDI_TXSIG_ONHOOK:
+		//dfxs_set_led(wc, FX_LED_GREEN);
+		if (debug)
+			printk("DAHDI_TXSIG_ONHOOK\n");
+		switch(chan->sig) {
+		case DAHDI_SIG_EM:
+		case DAHDI_SIG_FXOKS:
+		case DAHDI_SIG_FXOLS:
+			wc->mod.fxs.lasttxhook = wc->mod.fxs.idletxhookstate;
+			break;
+		case DAHDI_SIG_FXOGS:
+			wc->mod.fxs.lasttxhook = 3;
+			break;
+		}
+		ringing=0;
+		break;
+	case DAHDI_TXSIG_OFFHOOK:
+		//dfxs_set_led(wc, FX_LED_GREEN);
+		if (debug)
+			printk("DAHDI_TXSIG_OFFHOOK\n");
+		switch(chan->sig) {
+		case DAHDI_SIG_EM:
+			wc->mod.fxs.lasttxhook = 5;
+			break;
+		default:
+			wc->mod.fxs.lasttxhook = wc->mod.fxs.idletxhookstate;
+			break;
+		}
+		break;
+	case DAHDI_TXSIG_START:
+		//dfxs_set_led(wc, FX_LED_RED);
+		if (debug)
+		    printk("DAHDI_TXSIG_START\n");
+		wc->mod.fxs.lasttxhook = 4;
+		ringing=1;
+		break;
+	case DAHDI_TXSIG_KEWL:
+		if (debug)
+		    printk("DAHDI_TXSIG_KEWL\n");
+		wc->mod.fxs.lasttxhook = 0;
+		break;
+	default:
+		printk("dfxs: Can't set tx state to %d\n", txsig);
+	}
+	
+	//Schedule bit-bang SPI for si3217x out of this context as they need to sleep
+	schedule_work(&work_dfxs_hooksig);
+
+	return 0;
+}
+
+
+/* Schedule bit-bang SPI for si3217x out as they need to sleep */
+static void work_dfxs_hooksig_si3217x(struct work_struct *test) {
+
+        struct dfxs *wc = devs;
+
+	if (debug) {
+              u8 temp;
+              si3217x_read_reg(SI3217X_LINEFEED, &temp);
+              printk(" LINEFEED (REG30) before: 0x%0x\n", temp);
+        }
+
+        si3217x_write_reg(SI3217X_LINEFEED, wc->mod.fxs.lasttxhook);
+
+        if (debug) printk("  lasttxhook: %d\n", wc->mod.fxs.lasttxhook);
+}
+
+static const struct dahdi_span_ops dfxs_span_ops = {
+        						.owner = THIS_MODULE,
+        						.hooksig = dfxs_hooksig,
+							.open = dfxs_open,
+        						.close = dfxs_close,
+        						.ioctl = dfxs_ioctl,
+							.watchdog = dfxs_watchdog};
+
+static int dfxs_initialize(struct dfxs *wc)
+{
+
+	/* Zapata stuff */
+	sprintf(wc->span.name, "DFXS/%d", wc->pos);
+	sprintf(wc->span.desc, "%s Board %d", wc->variety, wc->pos + 1);
+	wc->span.deflaw = DAHDI_LAW_MULAW;
+		
+	sprintf(wc->chan.name, "DFXS/%d/%d", wc->pos, 0);
+	wc->chan.sigcap = DAHDI_SIG_FXOKS | DAHDI_SIG_FXOLS | DAHDI_SIG_FXOGS | DAHDI_SIG_SF | DAHDI_SIG_EM | DAHDI_SIG_CLEAR;
+	wc->chan.sigcap |= DAHDI_SIG_FXSKS | DAHDI_SIG_FXSLS;
+	wc->chan.chanpos = 1;
+	wc->chan.pvt = wc;
+	wc->_chan=&(wc->chan);
+	
+	wc->span.manufacturer   = "Switchvoice";
+	strlcpy(wc->span.devicetype, wc->variety, sizeof(wc->span.devicetype));
+	wc->span.chans = &(wc->_chan);
+	wc->span.channels = 1;
+	wc->span.flags = DAHDI_FLAG_RBS;
+	
+	wc->span.ops = &dfxs_span_ops;
+	if (dahdi_register(&wc->span, 0)) {
+		printk("Unable to register span with DAHDI\n");
+		return -1;
+	}
+	return 0;
+}
+
+static void dfxs_post_initialize(struct dfxs *wc)
+{
+	/* Finalize signalling  */
+	if (wc->cardflag) {
+		wc->chan.sigcap = DAHDI_SIG_FXOKS | DAHDI_SIG_FXOLS | DAHDI_SIG_FXOGS | DAHDI_SIG_SF | DAHDI_SIG_EM | DAHDI_SIG_CLEAR;
+	}
+}
+
+int dfxs_proc_read(char *buf, char **start, off_t off, 
+		    int count, int *eof, void *data)
+{
+	int len=0, real_count;
+	struct dfxs *wc = devs;
+	
+	real_count=count;
+	count = PAGE_SIZE-1024;
+
+	if (wc->cardflag){
+		u8 temp;
+		si3217x_read_reg(SI3217X_LINEFEED, &temp);
+    		len += snprintf(buf + len, count - len, "LINEFEED.....: 0x%x\n", temp);
+	}
+	count=real_count;
+        // If everything printed so far is before beginning of request
+        if (len <= off) {off = 0;len = 0;}
+        *start = buf + off;
+        len -= off;          		 // un-count any remaining offset 
+        *eof = 1;
+        if (len > count) len = count;    // don't return bytes not asked for
+        return len;
+}
+
+static int dfxs_hardware_init(struct dfxs *wc)
+{
+        create_proc_read_entry("dfxs", 0, NULL, dfxs_proc_read, NULL);
+
+	if (tdm_callback(regular_interrupt_processing)) {
+		printk("tdm is not properly initialized\n");
+		return -1;
+	}	
+
+	/* Init with Automatic Calibaration */
+	if (si3217x_proslic_init()) {
+
+		printk("couldn't init the Si3217x\n");
+		return -1;
+	} 
+
+	//Put the SLIC in Forward Active mode
+	si3217x_write_reg(SI3217X_LINEFEED, 1);
+
+	wc->cardflag = 1;
+
+	return 0;
+}
+
+static int dfxs_init_one(char *d)
+{
+	int res;
+	struct dfxs *wc;
+	int x;
+	static int initd_ifaces=0;
+	
+	dfxs_init_ok = 0;
+
+	if(initd_ifaces){
+		memset((void *)ifaces,0,(sizeof(struct dfxs *))*WC_MAX_IFACES);
+		initd_ifaces=1;
+	}
+	for (x=0;x<WC_MAX_IFACES;x++)
+		if (!ifaces[x]) break;
+	if (x >= WC_MAX_IFACES) {
+		printk("Too many interfaces\n");
+		return -EIO;
+	}
+	
+	wc = kmalloc(sizeof(struct dfxs), GFP_KERNEL);
+	if (wc) {
+		ifaces[x] = wc;
+		memset(wc, 0, sizeof(struct dfxs));
+		spin_lock_init(&wc->lock);
+		wc->mod.fxs.oldrxhook=1; //Force detection to notify dahdi for onhook state 
+		wc->mod.fxs.idletxhookstate = 0x1;
+		wc->curcard = -1;
+		wc->pos = x;
+		wc->variety = d;
+		wc->irq = ATH79_MISC_IRQ_DMA;
+		devs = wc;
+
+		if (dfxs_initialize(wc)) {
+			printk("dfxs: Unable to intialize FXS\n");
+			kfree(wc);
+			return -EIO;
+		}
+
+		if (dfxs_hardware_init(wc)) {
+			dahdi_unregister(&wc->span);
+			printk("dfxs_hardware_init() failed...\n");
+			kfree(wc);
+			return -EIO;
+		}
+
+ 		dfxs_init_ok = 1;
+
+		dfxs_post_initialize(wc);
+			
+		printk("Found: %s \n", wc->variety);
+		res = 0;
+	} else
+		res = -ENOMEM;
+	
+	return res;
+}
+
+static void dfxs_release(struct dfxs *wc)
+{
+  
+	printk("dfxs_init_ok = %d\n", dfxs_init_ok);
+	if (dfxs_init_ok) {
+	  //Hook NULL ISR to the TDM interrupt
+	  tdm_callback(NULL);
+	
+	  dahdi_unregister(&wc->span);
+	  kfree(wc);
+
+      	//fx_set_led(FX_LED_OFF); 
+	}
+        remove_proc_entry("dfxs", NULL);
+	printk("Freed a Wildcard\n");
+}
+
+static int __init dfxs_init(void)
+{
+	if(debug) printk(KERN_ALERT "Code test: code function addr = 0x%p\n", dahdi_ec_chunk);
+
+	dfxs_init_one(descr);   
+
+        printk("dfxs_init_ok = %d\n", dfxs_init_ok);
+	return 0;
+}
+
+static void __exit dfxs_cleanup(void)
+{
+	dfxs_release(devs);
+}
+
+module_param(debug, int, 0600);
+
+MODULE_DESCRIPTION("Wildcard TDM400P Zaptel Driver");
+MODULE_AUTHOR("Dimitar Penev <dpn@switchvoice.com>");
+#ifdef MODULE_LICENSE
+MODULE_LICENSE("GPL");
+#endif
+
+module_init(dfxs_init);
+module_exit(dfxs_cleanup);
+
--- /dev/null
+++ b/drivers/dahdi/dfxs.h
@@ -0,0 +1,94 @@
+/*
+ * Wilcard S100P FXS Interface Driver for Zapata Telephony interface
+ *
+ * Written by Mark Spencer <markster@linux-support.net>
+ *
+ * Copyright (C) 2001, Linux Support Services, Inc.
+ *
+ * All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 
+ *
+ */
+
+#include <linux/ioctl.h>
+
+#define NUM_REGS	129
+#define NUM_RAMS 	1024
+
+#define ILONG_ONHOOK_TRESHOLD   400000000L
+#define ILONG_OFFHOOK_TRESHOLD  300000
+#define ILOOP_OFFHOOK_LOW_TRESHOLD      1000000
+#define ILOOP_OFFHOOK_HIGH_TRESHOLD     15000000
+#define HOOK_COUNT_TRESHOLD     5
+
+
+struct dfxs_stats {
+	int tipvolt;	/* TIP voltage (mV) */
+	int ringvolt;	/* RING voltage (mV) */
+	int batvolt;	/* VBAT voltage (mV) */
+};
+
+struct dfxs_mem {
+	u8 reg[NUM_REGS];
+	u32 ram[NUM_RAMS];
+};
+
+struct dfxs_regop {
+	u8 address;
+	u8 val;
+};
+
+struct dfxs_ramop {
+        u16 address;
+        u32 val;
+};
+
+#define DFXS_GET_STATS	_IOR (DAHDI_CODE, 60, struct dfxs_stats)
+#define DFXS_GET_REGS	_IOR (DAHDI_CODE, 61, struct dfxs_mem)
+#define DFXS_SET_REG	_IOW (DAHDI_CODE, 62, struct dfxs_regop)
+#define DFXS_GET_REG    _IOW (DAHDI_CODE, 63, struct dfxs_regop)
+#define DFXS_SET_RAM    _IOW (DAHDI_CODE, 64, struct dfxs_ramop)
+#define DFXS_GET_RAM    _IOW (DAHDI_CODE, 65, struct dfxs_ramop)
+
+
+/* si3217x exports */
+extern int si3217x_read_reg(u8 address, u8 *val);
+extern int si3217x_write_reg(u8 address, u8 val);
+extern int si3217x_read_ram(u16 address, u32 *val);
+extern int si3217x_write_ram(u16 address, u32 val);
+extern int si3217x_proslic_init(void);
+extern int si3217x_hook_status(void);
+
+/*some registers/ram locations */
+#define SI3217X_LINEFEED	30
+
+#define SI3217X_MADC_VTIPC      1
+#define SI3217X_MADC_VRINGC     2
+#define SI3217X_MADC_VBAT      	3
+#define SI3217X_MADC_ILONG	7
+#define SI3217X_MADC_ILOOP      10
+
+#define SI3217X_VOLTRES		977L /* 931.323e-6 scaled by 2^20*/
+
+enum {
+        PROSLIC_ONHOOK, /**< Hook state is onhook */
+        PROSLIC_OFFHOOK /**< Hook state is offhook */
+};
+
+/* TDM definitions */
+typedef void (* tdm_isr_callback)(unsigned char *, unsigned char *);
+extern int tdm_callback(tdm_isr_callback isr_callback);
+extern void toggle(void);
